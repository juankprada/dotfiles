(require 'package)
(add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)  ;; for newest version of org mode
(package-initialize)

;; Automatically install these packages if they aren't present.
(when (not package-archive-contents)
  (package-refresh-contents))

;; Add in your own as you wish:
(defvar default-packages '(
                           exec-path-from-shell
                           which-key
			               diminish
                           doom-modeline
                           cmake-mode
                           magit
                           doom-themes
                           yasnippet
                           helm
                           helm-gtags
                           helm-projectile
                           helm-system-packages
                           string-inflection
			               company
                           company-box
                           org
                           ox-reveal
                           rustic
                           treemacs
                           all-the-icons
                           dashboard
                           dashboard-hackernews
                           treemacs
                           lsp-mode
                           lsp-ui
                           lsp-treemacs
                           lsp-java
                           dap-mode
                           flycheck
                           yaml-mode
                           json-mode
                           markdown-mode
                           seeing-is-believing
                           ruby-electric
                           chruby
                           inf-ruby
                           ruby-test-mode
                           php-mode
                           typescript-mode
                           ))


(dolist (p default-packages)
  (when (not (package-installed-p p))
    (package-install p)))



;;;----------------------------------------
;;; General Settings
;;;----------------------------------------
(add-to-list 'default-frame-alist '(inhibit-double-buffering . t))

;; start full screen
(add-to-list 'default-frame-alist '(fullscreen . maximized))

;; Get PATH from session instead of whatever idiotic things are done before
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))

;; set default coding of buffers
(setq default-buffer-file-coding-system 'utf-8-unix)

;; switched from tabs to spaces for indentation
(setq-default indent-tabs-mode nil)

;; also set the indentation level to 4.
(setq-default tab-width 4)

;; Don't autosave.
(setq auto-save-default nil)

;; GUI related settings
(if (display-graphic-p)
    (progn
      ;; Removed annoying UI elements
      (menu-bar-mode -1)
      (tool-bar-mode -1)
      (scroll-bar-mode -1)
      ))

;; Disable the C-z sleep/suspend key
(global-unset-key (kbd "C-z"))

;; Disable the C-x C-b key, because I use helm (C-x b) instead
(global-unset-key (kbd "C-x C-b"))


;; make copy and paste use the same clipboard as emacs.
(setq select-enable-primary t
      select-enable-clipboard t)

;; Ensure I can use paste from the Mac OS X clipboard ALWAYS (or close)
(when (memq window-system '(mac ns))
  (setq interprogram-paste-function (lambda () (shell-command-to-string "pbpaste"))))

;; sets Sunday to be the first day of the week in calendar
(setq calendar-week-start-day 0)


(recentf-mode 1)
(setq-default recent-save-file "~/.emacs.d/recentf")

;; save emacs backups in a different directory
;; (some build-systems build automatically all files with a prefix, and .#something.someending breakes that)
(setq backup-directory-alist '(("." . "~/.emacsbackups")))

;; Don't create lockfiles. Many build systems that continously monitor the file system get confused by them (e.g, Quarkus). This sometimes causes the build systems to not work anymore before restarting
(setq create-lockfiles nil)

;; Enable show-paren-mode (to visualize paranthesis) and make it possible to delete things we have marked
(show-paren-mode 1)
(delete-selection-mode 1)

;; don't use version numbers for backup files
(setq version-control 'never)

;; open unidentified files in text mode
(setq default-major-mode 'text-mode)

;; don't wrap long lines.
(set-default 'truncate-lines t)

;; make the region visible (but only up to the next operation on it)
(setq transient-mark-mode t)

;; don't add new lines to the end of a file when using down-arrow key
(setq next-line-add-newlines nil)

;; make find-file and buffer switch case insensitive
(setq read-file-name-completion-ignore-case t)
(setq read-buffer-completion-ignore-case t)

;; don't make pesky backup files
(setq make-backup-files nil)

;; use y or n instead of yes or no
(defalias 'yes-or-no-p 'y-or-n-p)

;; winne-mode helper mode to restore window layout
(when (fboundp 'winner-mode)
  (winner-mode 1))


(setq split-height-threshold 20)
(setq split-width-threshold nil)

;; This only works in Mac
(setq mac-command-modifier 'meta)
(setq mac-option-modifier nil)

;; Sets which key to delay for 5 secs before showing helpful commands
(require 'which-key)
(setq which-key-idle-delay 5)
(which-key-mode)



;; Smooth Scrolling
(setq scroll-conservatively 101)

;; Stop Emacs from losing undo information by
;; setting very high limits for undo buffers
(setq undo-limit 20000000)
(setq undo-strong-limit 40000000)

;; Automatically remove trailing whitespace.
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; ignore bell alarm completely
(setq ring-bell-function 'ignore)

;; Prevent Emacs from being closed with this Key combination
(global-set-key (kbd "C-x C-c") 'dont-kill-emacs)


;; Always start Emacs with a split view
(split-window-horizontally)

;;;----------------------------------------
;;; Beauty Stuff
;;;----------------------------------------

;; Set the Theme
;;(load-theme 'gruvbox t) ;; Use this to use simple themes and not Doom-themes
(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t) ; if nil, italics is universally disabled
(load-theme 'doom-miramare t)
(doom-themes-visual-bell-config)

;(setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
;(setq doom-themes-treemacs-theme "doom-mi") ; use "doom-colors" for less minimal icon theme
(doom-themes-treemacs-config)

;; Corrects (and improves) org-mode's native fontification.
(doom-themes-org-config)

;; Colours ("Colors" in some other languages)
;; Give me colours in major editing modes!
(require 'font-lock)
(global-font-lock-mode t)

;; Dont show the GNU splash screen
(setq inhibit-startup-message t)


(require 'all-the-icons)

;; Setup Dashboard
(require 'dashboard)
(require 'dashboard-hackernews)

(dashboard-setup-startup-hook)
(setq dashboard-banner-logo-title "Greetings my lord, let us hack today!")
(setq dashboard-startup-banner 'logo)
(setq dashboard-set-init-info t)
(setq dashboard-center-content nil)
(setq dashboard-set-navigator t)
(setq dashboard-navigator-buttons '((("" " Install system package" " Install system package" (lambda (&rest _) (helm-system-packages))))))
(setq dashboard-set-heading-icons t)
(setq dashboard-set-file-icons t)
(setq dashboard-week-agenda t)
(setq dashboard-items '((projects . 5)
                     (recents . 5)
                     (hackernews . 5)))


;; highlight region between point and mark
(transient-mark-mode t)

;; highlight during query
(setq query-replace-highlight t)

;; highlight incremental search
(setq search-highlight t)

(require 'doom-modeline)
(doom-modeline-mode 1)
;; Don’t compact font caches during GC.
(setq inhibit-compacting-font-caches t)
;(setq doom-modeline-height 22)
;(setq doom-modeline-project-detection 'auto)
;; Determines the style used by `doom-modeline-buffer-file-name'.
;;
;; Given ~/Projects/FOSS/emacs/lisp/comint.el
;;   auto => emacs/l/comint.el (in a project) or comint.el
;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
;;   truncate-with-project => emacs/l/comint.el
;;   truncate-except-project => ~/P/F/emacs/l/comint.el
;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
;;   truncate-all => ~/P/F/e/l/comint.el
;;   truncate-nil => ~/Projects/FOSS/emacs/lisp/comint.el
;;   relative-from-project => emacs/lisp/comint.el
;;   relative-to-project => lisp/comint.el
;;   file-name => comint.el
;;   buffer-name => comint.el<2> (uniquify buffer name)
;;
;; If you are experiencing the laggy issue, especially while editing remote files
;; with tramp, please try `file-name' style.
;; Please refer to https://github.com/bbatsov/projectile/issues/657.
;(setq doom-modeline-buffer-file-name-style 'relative-to-project)
;; Whether display icons in the mode-line.
(setq doom-modeline-icon t)
(setq doom-modeline-major-mode-icon t)
(setq doom-modeline-major-mode-color-icon t)
(setq doom-modeline-buffer-state-icon t)
(setq doom-modeline-buffer-modification-icon t)
(setq doom-modeline-time-icon t)
(setq doom-modeline-unicode-fallback nil)
(setq doom-modeline-buffer-name t)

(setq doom-modeline-highlight-modified-buffer-name t)
(setq doom-modeline-minor-modes nil)
(setq doom-modeline-enable-word-count nil)
(setq doom-modeline-buffer-encoding t)
(setq doom-modeline-indent-info nil)
(setq doom-modeline-persp-name t)
(setq doom-modeline-battery t)
(setq doom-modeline-time t)
(setq doom-modeline-env-version t)

(setq doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
(setq doom-modeline-env-rust-executable "rustc")

;; Set the font
(set-frame-font "Hack Nerd Font Mono 12" nil t)

;; Hide minor mode names in modeline
(require 'diminish)


;;;----------------------------------------
;;; General Editing Settings and Key Bindings
;;;----------------------------------------

;; Line numbers on programming modes
(add-to-list 'prog-mode-hook 'linum-mode)
;; show unncessary whitespace that can mess up your diff
(add-hook 'prog-mode-hook (lambda () (interactive) (setq show-trailing-whitespace 1)))

;; Duplicate a line
(global-set-key (kbd "C-c C-d") 'duplicate-line)

;; redefine the isearch-forward-regexp function
(add-hook 'isearch-mode-hook 'my-isearch-yank-word-hook)

;; execute my-isearch-word-at-point with ctrl+* key binding
(global-set-key (kbd "C-*") 'my-isearch-word-at-point)


;; String Inflection
(require 'string-inflection)
(global-set-key (kbd "C-c i") 'string-inflection-cycle)
;; Force to CamelCase
(global-set-key (kbd "C-c C") 'string-inflection-camelcase)
 ;; Force to lowerCamelCase
(global-set-key (kbd "C-c L") 'string-inflection-lower-camelcase)
 ;; Cycle through Java styles
(global-set-key (kbd "C-c J") 'string-inflection-java-style-cycle)
;; Cycle through underscor
(global-set-key (kbd "C-c _") 'string-inflection-underscore)


;; Set movement key bindings
(define-key global-map [M-right] 'forward-word)
(define-key global-map [M-left] 'backward-word)
(define-key global-map [M-up] 'previous-blank-line)
(define-key global-map [M-down] 'next-blank-line)

(define-key global-map [C-right] 'forward-word)
(define-key global-map [C-left] 'backward-word)
(define-key global-map [C-up] 'previous-blank-line)
(define-key global-map [C-down] 'next-blank-line)
(define-key global-map [home] 'beginning-of-line)
(define-key global-map [end] 'end-of-line)
(define-key global-map [pgup] 'forward-page)
(define-key global-map [pgdown] 'backward-page)
(define-key global-map [C-next] 'scroll-other-window)
(define-key global-map [C-prior] 'scroll-other-window-down)





;;;----------------------------------------
;;; Extra Functionality
;;;----------------------------------------


; Bright-red TODOs, yellow IMPORTANT and STUDY and green NOTE
(setq fixme-modes '(c++-mode c-mode emacs-lisp-mode))
(make-face 'font-lock-fixme-face)
(make-face 'font-lock-study-face)
(make-face 'font-lock-important-face)
(make-face 'font-lock-note-face)
(mapc (lambda (mode)
        (font-lock-add-keywords
         mode
         '(("\\<\\(TODO\\)" 1 'font-lock-fixme-face t)
           ("\\<\\(STUDY\\)" 1 'font-lock-study-face t)
           ("\\<\\(IMPORTANT\\)" 1 'font-lock-important-face t)
           ("\\<\\(NOTE\\)" 1 'font-lock-note-face t))))
      fixme-modes)
(modify-face 'font-lock-fixme-face "Red" nil nil t nil t nil nil)
(modify-face 'font-lock-study-face "Yellow" nil nil t nil t nil nil)
(modify-face 'font-lock-important-face "Yellow" nil nil t nil t nil nil)
(modify-face 'font-lock-note-face "Green" nil nil t nil t nil nil)


; Determine the underlying operating system
(if (eq system-type 'darwin) (setq juank-aquamacs t))
(if (eq system-type 'gnu/linux) (setq juank-linux t))
(if (eq system-type 'windows-nt)(setq juank-win32 t))




;; Company Mode
;;----------------------------------------
(require 'company)
(add-hook 'after-init-hook 'global-company-mode)

;; Set company completion to begin at once
;(setq company-idle-delay 0)
;(setq company-echo-delay 0)
(setq company-minimum-prefix-length 3)




(require 'company-box)
(add-hook 'company-mode-hook 'company-box-mode)

(setq company-box-frame-behavior 'point)
(setq company-box-show-single-candidate t)
(setq company-box-doc-delay 1)


;; Helm
;;----------------------------------------
(require 'helm)

(helm-mode 1)
(projectile-mode +1)
(helm-projectile-on)
(helm-autoresize-mode t)
;; hide uninteresting buffers from buffer list
(add-to-list 'helm-boring-buffer-regexp-list (rx "magit-"))
(add-to-list 'helm-boring-buffer-regexp-list (rx "*helm"))

;; optional fuzzy matching for helm-M-x
(setq projectile-completion-system 'helm)

(setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t
      helm-M-x-fuzzy-match                  t
      helm-adaptive-mode                    1
      helm-buffers-fuzzy-matching           t
      helm-recentf-fuzzy-match              t)


;; Helm GTags
;;----------------------------------------
(require 'helm-gtags)
(setq
 helm-gtags-ignore-case t
 helm-gtags-auto-update t ; auto update gtags on save
 helm-gtags-use-input-at-cursor t
 helm-gtags-pulse-at-cursor t
 helm-gtags-prefix-key "\C-cg"
 helm-gtags-suggested-key-mapping t
 )

;; enable helm-gtags-mode
(add-hook 'dired-mode-hook 'helm-gtags-mode)
(add-hook 'eshell-mode-hook 'helm-gtags-mode)
(add-hook 'c-mode-hook 'helm-gtags-mode)
(add-hook 'c++-mode-hook 'helm-gtags-mode)
(add-hook 'asm-mode-hook 'helm-gtags-mode)
(add-hook 'rust-mode-hook 'helm-gtags-mode)


;; Yasnippet
(require 'yasnippet)
(yas-reload-all)
(add-hook 'sh-mode #'yas-minor-mode)
(add-hook 'c-mode-common-hook #'yas-minor-mode)
(add-hook 'java-mode-hook #'yas-minor-mode)
(add-hook 'rust-mode-hook #'yas-minor-mode)



;; flycheck
;;----------------------------------------
(require 'flycheck)
(setq flycheck-indication-mode nil)
(setq flycheck-highlighting-mode 'lines)



;; LSP Mode - IDE like features
;;----------------------------------------
(require 'lsp-mode)
(require 'lsp-ui)
(require 'dap-mode)
(require 'lsp-treemacs)
(require 'lsp-java)
(add-hook 'java-mode-hook 'lsp)

(dap-mode 1)

;; The modes below are optional

(dap-ui-mode 1)
;; enables mouse hover support
(dap-tooltip-mode 1)
;; use tooltips for mouse hover
;; if it is not enabled `dap-mode' will use the minibuffer.
(tooltip-mode 1)
;; displays floating panel with debug buttons
;; requies emacs 26+
(dap-ui-controls-mode 1)





;;;----------------------------------------
;;; Development Settings
;;;----------------------------------------
(add-to-list 'auto-mode-alist '("\\.gitconfig$" . conf-mode))
(setq auto-mode-alist
      (append
       '(("\\.cpp$"    . c++-mode)
         ("\\.hpp$"    . c++-mode)
         ("\\.hin$"    . c++-mode)
         ("\\.cin$"    . c++-mode)
         ("\\.inl$"    . c++-mode)
         ("\\.rdc$"    . c++-mode)
         ("\\.h$"    . c-mode)
         ("\\.c$"   . c-mode)
         ("\\.cc$"   . c++-mode)
         ("\\.c8$"   . c++-mode)
         ("\\.txt$" . indented-text-mode)
         ("\\.emacs$" . emacs-lisp-mode)
         ("\\.gen$" . gen-mode)
         ("\\.ms$" . fundamental-mode)
         ("\\.m$" . objc-mode)
         ("\\.mm$" . objc-mode)
         ("\\.java$" . java-mode)
         ) auto-mode-alist))



;; RUST MODE
;;; -----------------------------------------
(require 'rustic)
(setq rustic-format-trigger 'on-save)
(setq rustic-format-on-save-method 'rustic-format-buffer)


;; PHP MODE
;;; ----------------------------------------
(add-hook 'php-mode-hook 'lsp)
(with-eval-after-load 'lsp-mode
  (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
  (require 'dap-php)
  (yas-global-mode))

;; RUBY MODE
;; ----------------------------------------
;; ----------------------------------------
(require 'ruby-electric)
(require 'dap-ruby)
(add-hook 'ruby-mode-hook 'ruby-electric-mode)
(chruby "2.2.2")

(setq seeing-is-believing-prefix "C-.")
(add-hook 'ruby-mode-hook 'seeing-is-believing)
(require 'seeing-is-believing)

(autoload 'inf-ruby-minor-mode "inf-ruby" "Run an inferior Ruby process" t)
(add-hook 'ruby-mode-hook 'inf-ruby-minor-mode)

(require 'ruby-test-mode)
(add-hook 'ruby-mode-hook 'ruby-test-mode)



;; PYTHON MODE
;; ----------------------------------------
(require 'dap-python)
;; if you installed debugpy, you need to set this
;; https://github.com/emacs-lsp/dap-mode/issues/306
(setq dap-python-debugger 'debugpy)



;; NODEJS
;; ----------------------------------------

(require 'lsp-mode)
(add-hook 'typescript-mode-hook 'lsp-deferred)
(add-hook 'javascript-mode-hook 'lsp-deferred)

(defun my-setup-dap-node ()
  "Require dap-node feature and run dap-node-setup if VSCode module isn't already installed"
  (require 'dap-node)
  (unless (file-exists-p dap-node-debug-path) (dap-node-setup)))

(add-hook 'typescript-mode-hook 'my-setup-dap-node)
(add-hook 'javascript-mode-hook 'my-setup-dap-node)


;; C/C++ Modes
;;----------------------------------------
(require 'cc-mode)
;(add-hook 'c-mode-hook 'lsp) ;; Check if we really miss it
(add-hook 'c-mode-hook 'yas-minor-mode)

(setq compilation-directory-locked nil)


(when (bound-and-true-p juank-win32)
  (setq juank-makescript "build.bat")
  (setq juank-font "outline-Liberation Mono")
  )

(when (bound-and-true-p juank-aquamacs)
  (cua-mode 0)
  (setq mac-option-modifier nil)
  (setq mac-command-modifier 'meta)
  (setq x-select-enable-clipboard t)
  (setq special-display-regexps nil)
  (setq special-display-buffer-names nil)
  (define-key function-key-map [return] [13])
  (setq mac-command-key-is-meta t)
  (scroll-bar-mode -1)
  (setq mac-pass-command-to-system nil)
  (setq juank-makescript "./build_mac.sh")
  )

(when (bound-and-true-p juank-linux)
  (setq juank-makescript "./build_linux.sh")
  )

;; GDB setuo
;; split windows for gdb screens
(setq gdb-many-windows t gdb-show-main t)

;; my shortcut for "go to line"
(global-set-key (kbd "C-c C-g") 'goto-line)

; C++ indentation style
(defconst juank-big-fun-c-style
  '((c-electric-pound-behavior   . nil)
    (c-tab-always-indent         . t)
    (c-comment-only-line-offset  . 0)
    (c-hanging-braces-alist      . ((class-open)
                                    (class-close)
                                    (defun-open)
                                    (defun-close)
                                    (inline-open)
                                    (inline-close)
                                    (brace-list-open)
                                    (brace-list-close)
                                    (brace-list-intro)
                                    (brace-list-entry)
                                    (block-open)
                                    (block-close)
                                    (substatement-open)
                                    (statement-case-open)
                                    (class-open)))
    (c-hanging-colons-alist      . ((inher-intro)
                                    (case-label)
                                    (label)
                                    (access-label)
                                    (access-key)
                                    (member-init-intro)))
    (c-cleanup-list              . (scope-operator
                                    list-close-comma
                                    defun-close-semi))
    (c-offsets-alist             . ((arglist-close         .  c-lineup-arglist)
                                    (label                 . -4)
                                    (access-label          . -4)
                                    (substatement-open     .  0)
                                    (statement-case-intro  .  4)
                                    (statement-block-intro .  c-lineup-for)
                                    (case-label            .  4)
                                    (block-open            .  0)
                                    (inline-open           .  0)
                                    (topmost-intro-cont    .  0)
                                    (knr-argdecl-intro     . -4)
                                    (brace-list-open       .  0)
                                    (brace-list-intro      .  4)))
    (c-echo-syntactic-information-p . t))
    "Casey's Big Fun C++ Style")






;; C & C++ tweaks
(require 'cc-mode)


(defun juank-big-fun-compilation-hook ()
  (make-local-variable 'truncate-lines)
  (setq truncate-lines nil)
  )

(add-hook 'compilation-mode-hook 'juank-big-fun-compilation-hook)


(setq compilation-context-lines 0)
;; (setq compilation-error-regexp-alist
;;       (cons '("^\\([0-9]+>\\)?\\(\\(?:[a-zA-Z]:\\)?[^:(\t\n]+\\)(\\([0-9]+\\)) : \\(?:fatal error\\|warnin\\(g\\)\\) C[0-9]+:" 2 3 nil (4))
;; 	    compilation-error-regexp-alist))


(defun my-c-mode-common-hook ()
  (c-add-style "BigFun" juank-big-fun-c-style t)

  ; 4-space tabs
  (setq tab-width 4
        indent-tabs-mode nil)

  ; Additional style stuff
  (c-set-offset 'member-init-intro '++)

  ; No hungry backspace
  (c-toggle-auto-hungry-state -1)

  ; Newline indents, semi-colon doesn't
  (define-key c-mode-map "\C-m" 'newline-and-indent)
  (setq c-hanging-semi&comma-criteria '((lambda () 'stop)))

  ; Handle super-tabbify (TAB completes, shift-TAB actually tabs)
  (setq dabbrev-case-replace t)
  (setq dabbrev-case-fold-search t)
  (setq dabbrev-upcase-means-case-search t)
  (setq split-window-preferred-function 'casey-never-split-a-window)
  ; Abbrevation expansion
  (abbrev-mode 1)

  (turn-on-font-lock)

(defun juank-find-corresponding-file ()
    "Find the file that corresponds to this one."
    (interactive)
    (setq CorrespondingFileName nil)
    (setq BaseFileName (file-name-sans-extension buffer-file-name))
    (if (string-match "\\.c" buffer-file-name)
       (setq CorrespondingFileName (concat BaseFileName ".h")))
    (if (string-match "\\.h" buffer-file-name)
       (if (file-exists-p (concat BaseFileName ".c")) (setq CorrespondingFileName (concat BaseFileName ".c"))
	   (setq CorrespondingFileName (concat BaseFileName ".cpp"))))
    (if (string-match "\\.hin" buffer-file-name)
       (setq CorrespondingFileName (concat BaseFileName ".cin")))
    (if (string-match "\\.cin" buffer-file-name)
       (setq CorrespondingFileName (concat BaseFileName ".hin")))
    (if (string-match "\\.cpp" buffer-file-name)
       (setq CorrespondingFileName (concat BaseFileName ".h")))
    (if CorrespondingFileName (find-file CorrespondingFileName)
       (error "Unable to find a corresponding file")))


(defun juank-find-corresponding-file-other-window ()

    "Find the file that corresponds to this one."
    (interactive)
    (find-file-other-window buffer-file-name)
    (juank-find-corresponding-file)
    (other-window -1))

  (setq comment-style 'multi-line)
  (setq comment-start "/* ")
  (setq comment-end " */")
  (setq c-indent-level 4) ; a tab is equivalent to 4 spaces
  (local-set-key  (kbd "C-c a") 'juank-find-corresponding-file-other-window)
  (global-set-key [f9] 'first-error)
  (global-set-key [f10] 'previous-error)
  (global-set-key [f11] 'next-error)



  (defun juank-header-format ()
    "Format the given file as a header file."
    (interactive)
    (setq BaseFileName (file-name-sans-extension (file-name-nondirectory buffer-file-name)))
    (insert "#if !defined(")
    (push-mark)
    (insert BaseFileName)
    (upcase-region (mark) (point))
    (pop-mark)
    (insert "_H)\n")
    (insert "/* ========================================================================\n")
    (insert "   $File: $\n")
    (insert "   $Date: $\n")
    (insert "   $Revision: $\n")
    (insert "   $Creator: Juan Prada $\n")
    (insert "   $Notice: (C) Copyright 2016 by Juan Camilo Prada. All Rights Reserved. $\n")
    (insert "   ======================================================================== */\n")
    (insert "\n")
    (insert "#define ")
    (push-mark)
    (insert BaseFileName)
    (upcase-region (mark) (point))
    (pop-mark)
    (insert "_H\n")
    (insert "#endif")
    )


  (defun juank-source-format ()
    "Format the given file as a source file."
    (interactive)
    (setq BaseFileName (file-name-sans-extension (file-name-nondirectory buffer-file-name)))
    (insert "/* ========================================================================\n")
    (insert "   $File: $\n")
    (insert "   $Date: $\n")
    (insert "   $Revision: $\n")
    (insert "   $Creator: Juan Prada $\n")
    (insert "   $Notice: (C) Copyright 2016 by Juan Camilo Prada. All Rights Reserved. $\n")
    (insert "   ======================================================================== */\n")
    )



  (cond ((file-exists-p buffer-file-name) t)
        ((string-match "[.]hin" buffer-file-name) (juank-source-format))
        ((string-match "[.]cin" buffer-file-name) (juank-source-format))
        ((string-match "[.]h" buffer-file-name) (juank-header-format))
        ((string-match "[.]c" buffer-file-name) (juank-source-format))
        ((string-match "[.]cpp" buffer-file-name) (juank-source-format)))



  (add-to-list 'compilation-error-regexp-alist 'juank-devenv)
  (add-to-list 'compilation-error-regexp-alist-alist '(juank-devenv
                                                       "*\\([0-9]+>\\)?\\(\\(?:[a-zA-Z]:\\)?[^:(\t\n]+\\)(\\([0-9]+\\)) : \\(?:see declaration\\|\\(?:warnin\\(g\\)\\|[a-z ]+\\) C[0-9]+:\\)"
                                                       2 3 nil (4)))

  (define-key c-mode-map "\t" 'dabbrev-expand)
  (define-key c-mode-map [S-tab] 'indent-for-tab-command)
  (define-key c-mode-map [C-tab] 'indent-region)
  )

(defun juank-big-fun-compilation-hook ()
  (make-local-variable 'truncate-lines)
  (setq truncate-lines nil)
  (setq compilation-context-lines 0)
  )

(add-hook 'compilation-mode-hook 'juank-big-fun-compilation-hook)
(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)








; Markdown
;--------------------
(require 'markdown-mode)

(setq markdown-command "/usr/bin/markdown")
(add-to-list 'auto-mode-alist '("\\.markdown$" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
(setq markdown-css-paths `(,(expand-file-name "Documents/markdown.css")))



; ORG mode
;--------------------
(eval-after-load "org"
  '(require 'ox-md nil t))
(require 'ox-reveal)


(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-c C-a" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-iswitchb)
(setq org-log-done t)

(setq org-todo-keywords
      (quote ((sequence "TODO(t!)"  "NEXT(n!)" "|" "DONE(d!)")
	      (sequence "IDEA(i!)" "MAYBE(y!)" "STAGED(s!)" "WORKING(k!)" "|" "USED(u!/@)")
)))



;; cmake mode
;;----------------------------------------
(require 'cmake-mode)
(setq auto-mode-alist
      (append '(("cmakelists\\.txt\\'" . cmake-mode)
                ("\\.cmake\\'" . cmake-mode))
              auto-mode-alist))



;; setup compile package
(require 'compile)
(setq mode-compile-always-save-buffer-p nil)






;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Put All Functions here
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun juank-replace-string (FromString ToString)
  "Replace a string without moving point."
  (interactive "sReplace: \nsReplace: %s  With: ")
  (save-excursion
    (replace-string FromString ToString)
    ))


(defun previous-blank-line ()
  "Moves to the previous line containing nothing but whitespace."
  (interactive)
  (search-backward-regexp "^[ \t]*\n")
  )

(defun next-blank-line ()
  "Moves to the next line containing nothing but whitespace."
  (interactive)
  (forward-line)
  (search-forward-regexp "^[ \t]*\n")
  (forward-line -1)
  )

(defun byte-compile-dotfiles ()
  "Byte compile all Emacs dotfiles."
  (interactive)
  ;; Automatically recompile the entire .emacs.d directory.
  (byte-recompile-directory (expand-file-name config-dir) 0))

(defun byte-compile-user-init-file ()
  (let ((byte-compile-warnings '(unresolved)))
    ;; in case compilation fails, don't leave the old .elc around:
    (when (file-exists-p (concat user-init-file ".elc"))
      (delete-file (concat user-init-file ".elc")))
    (byte-compile-file user-init-file)
    ;;(byte-compile-dotfiles)
    ;; (message "%s compiled" user-init-file)
    ))

;; Prevent C-x C-c to kill emacs!!
(defun dont-kill-emacs()
  "Disable C-x C-c binding execute kill-emacs."
  (interactive)
  (error (substitute-command-keys "To exit emacs: \\[kill-emacs]")))



;; function to call a command at a specific directory
(defun in-directory ()
  "reads a directory name (using ido), then runs
execute-extended-command with default-directory in the given
directory."
  (interactive)
  (let ((default-directory
          (read-directory-name "in directory: "
                               nil nil t)))
    (call-interactively 'execute-extended-command)))


(defun find-project-directory-recursive ()
  "Recursively search for a makefile."
  (interactive)
  (if (file-exists-p juank-makescript) t
    (cd "../")
    (find-project-directory-recursive)))


(defun lock-compilation-directory ()
  "The compilation process should NOT hunt for a makefile"
  (interactive)
  (setq compilation-directory-locked t)
  (message "Compilation directory is locked."))


(defun unlock-compilation-directory ()
  "The compilation process SHOULD hunt for a makefile"
  (interactive)
  (setq compilation-directory-locked nil)
  (message "Compilation directory is roaming."))

(defun find-project-directory ()
  "Find the project directory."
  (interactive)
  (setq find-project-from-directory default-directory)
  (switch-to-buffer-other-window "*compilation*")
  (if compilation-directory-locked (cd last-compilation-directory)
    (cd find-project-from-directory)
    (find-project-directory-recursive)
    (setq last-compilation-directory default-directory)))

(defun make-without-asking ()
  "Make the current build."
  (interactive)
  (if (find-project-directory) (compile juank-makescript))
  (other-window 1))
(define-key global-map "\M-m" 'make-without-asking)

;; function used to call the compile command at a specific dir
(defun project-compile ()
  "reads a directory name (using ido), then runs
execute-extended-command with default-directory in the given
directory."
  (interactive)
  (let ((default-directory
          (read-directory-name "compile in directory: "
                               nil nil t)))
    (call-interactively 'compile)))

                                        ;(global-set-key [f2] 'compile-in-directory)

;; custom grep tool
(defun my-grep ()
  "grep recursively for something.  defaults to item at cursor
  position and current directory."
  (interactive)
  (grep (read-string "run grep as: " (concat "grep -isrni " "\"" (thing-at-point 'symbol) "\"" " .")))
  )
;; shortcut for my grep
(global-set-key (kbd "C-c C-s") 'my-grep)



;; function to remove windows line ending
(defun remove-windows-line-endings ()
  "removes the ^m line endings"
  (interactive)
  (replace-string "\^M" "")
  )


(defun untabify-buffer ()
  (interactive)
  (untabify (point-min) (point-max)))

(defun indent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max)))

(defun cleanup-buffer ()
  "Perform a bunch of operations on the whitespace content of a buffer."
  (interactive)
  (indent-buffer)
  (untabify-buffer)
  (delete-trailing-whitespace))


(defun cleanup-region (beg end)
  "Remove tmux artifacts from region."
  (interactive "r")
  (dolist (re '("\\\\│\·*\n" "\W*│\·*"))
    (replace-regexp re "" nil beg end)))



;; search word at point
(defun my-isearch-word-at-point ()
  (interactive)
  (call-interactively 'isearch-forward-regexp))


(defun my-isearch-yank-word-hook ()
  (when (equal this-command 'my-isearch-word-at-point)
    (let ((string (concat "\\<"
                          (buffer-substring-no-properties
                           (progn (skip-syntax-backward "w_") (point))
                           (progn (skip-syntax-forward "w_") (point)))
                          "\\>")))
      (if (and isearch-case-fold-search
               (eq 'not-yanks search-upper-case))
          (setq string (downcase string)))
      (setq isearch-string string
            isearch-message
            (concat isearch-message
                    (mapconcat 'isearch-text-char-description
                               string ""))
            isearch-yank-flag t)
      (isearch-search-and-update))))


(defun unix-file ()
      "Change the current buffer to Latin 1 with Unix line-ends."
      (interactive)
      (set-buffer-file-coding-system 'iso-latin-1-unix t))

(defun dos-file ()
      "Change the current buffer to Latin 1 with DOS line-ends."
      (interactive)
      (set-buffer-file-coding-system 'iso-latin-1-dos t))

(defun mac-file ()
      "Change the current buffer to Latin 1 with Mac line-ends."
      (interactive)
      (set-buffer-file-coding-system 'iso-latin-1-mac t))

;; function to duplicate current line
(defun duplicate-line()
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (open-line 1)
  (next-line 1)
  (yank)
  )




(defun casey-never-split-a-window
;    "Never, ever split a window.  Why would anyone EVER want you to do that??"
  nil)

;; Mimic Vim's powerline
;(require 'powerline)
;(require 'airline-themes)
;(load-theme 'airline-doom-one t)

;;;----------------------------------------
;;; KEYBINDINGS
;;;----------------------------------------

(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x b") 'helm-mini)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "C-x C-p") 'helm-projectile)

(global-set-key (kbd "C-<return>") 'company-complete)

(define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
(define-key helm-gtags-mode-map (kbd "M-j") 'helm-gtags-select)
(define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
(define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
(define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
(define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)

(define-key global-map [f3] 'juank-replace-string)
;; if buffer changed outside emacs reload it automatically
;(global-auto-revert-mode t)

;; Run e shell
(global-set-key [f8] 'eshell)


;; activate whitespace-mode to view all whitespace characters
(global-set-key (kbd "C-c C-w") 'whitespace-mode)

;; Comment and uncommpent shortcuts
(global-set-key  (kbd "C-c c") 'comment-region)
(global-set-key  (kbd "C-c u") 'uncomment-region)

;; my shortcut for "go to line"
(global-set-key (kbd "C-c C-g") 'goto-line)


(global-set-key (kbd "C-x M-t") 'cleanup-region)
(global-set-key (kbd "C-c n") 'cleanup-buffer)


(diminish 'helm-gtags-mode)
(diminish 'helm-mode)
(diminish 'company-mode)
(diminish 'yas-minor-mode)
(diminish 'autopair-mode)
(diminish 'abbrev-mode)
(diminish 'projectile-mode)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(haskell-mode ruby-test-mode inf-ruby chruby ruby-electric seeing-is-believing yasnippet yaml-mode which-key string-inflection rustic ox-reveal magit lsp-ui lsp-java json-mode helm-system-packages helm-projectile helm-gtags flycheck exec-path-from-shell doom-themes doom-modeline diminish dashboard-hackernews company-box cmake-mode all-the-icons)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
