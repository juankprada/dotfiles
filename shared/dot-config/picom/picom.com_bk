#################################
#
# Backend
#
#################################

# Backend to use: "xrender" or "glx".
# GLX backend is typically much faster but depends on a sane driver.
backend = "glx";

#################################
#
# GLX backend
#
#################################

glx-no-stencil = true;

# GLX backend: Copy unmodified regions from front buffer instead of redrawing them all.
# My tests with nvidia-drivers show a 10% decrease in performance when the whole screen is modified,
# but a 20% increase when only 1/4 is.
# My tests on nouveau show terrible slowdown.
glx-copy-from-front = false;

# GLX backend: Use MESA_copy_sub_buffer to do partial screen update.
# My tests on nouveau shows a 200% performance boost when only 1/4 of the screen is updated.
# May break VSync and is not available on some drivers.
# Overrides --glx-copy-from-front.
glx-use-copysubbuffermesa = true;

# GLX backend: Avoid rebinding pixmap on window damage.
# Probably could improve performance on rapid window content changes, but is known to break things on some drivers (LLVMpipe).
# Recommended if it works.
glx-no-rebind-pixmap = true;

# GLX backend: GLX buffer swap method we assume.
# Could be undefined (0), copy (1), exchange (2), 3-6, or buffer-age (-1).
# undefined is the slowest and the safest, and the default value.
# copy is fastest, but may fail on some drivers,
# 2-6 are gradually slower but safer (6 is still faster than 0).
# Usually, double buffer means 2, triple buffer means 3.
# buffer-age means auto-detect using GLX_EXT_buffer_age, supported by some drivers.
# Useless with --glx-use-copysubbuffermesa.
# Partially breaks --resize-damage.
# Defaults to undefined.
#glx-swap-method = "undefined";


animations = true;
animation-mass = 1;
animation-stiffness = 300.0;
animation-dampening = 30.0;
animation-clamping = false;
animation-for-open-window = "zoom";
animation-for-menu-window = "slide-down";
animation-for-transient-window = "slide-down";

transition-length = 0
transition-pow-x = 0.1
transition-pow-y = 0.1
transition-pow-w = 0.1
transition-pow-h = 0.1
size-transition = true

#################################
#
# Shadows
#
#################################

shadow = true;
shadow-radius = 10;
shadow-offset-x = -4;
shadow-offset-y = -4;
shadow-opacity = 0.60;

# The shadow exclude options are helpful if you have shadows enabled. Due to the way picom draws its shadows, certain applications will have visual glitches
# (most applications are fine, only apps that do weird things with xshapes or argb are affected).
# This list includes all the affected apps I found in my testing. The "! name~=''" part excludes shadows on any "Unknown" windows, this prevents a visual glitch with the XFWM alt tab switcher.
shadow-exclude = [
    "! name~=''",
    "name = 'Notification'",
    "name = 'Plank'",
    "name = 'Docky'",
    "name = 'Kupfer'",
    "name = 'xfce4-notifyd'",
    "name = 'cpt_frame_window'",
    "name *= 'VLC'",
    "name *= 'compton'",
   # "name *= 'picom'",
   # "name *= 'Chromium'",
    "name *= 'Chrome'",
    "name *= 'yakuake'",
    "class_g = 'dmenu'",
    "class_g = 'trayer'",
    "class_g = 'Firefox' && argb",
    "class_g = 'Conky'",
    "class_g = 'Kupfer'",
    "class_g = 'Synapse'",
    "class_g ?= 'Notify-osd'",
    "class_g ?= 'Cairo-dock'",
    "class_g ?= 'Xfce4-notifyd'",
    "class_g ?= 'Xfce4-power-manager'",
    "_GTK_FRAME_EXTENTS@:c",
    "_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'"
];
# Avoid drawing shadow on all shaped windows (see also: --detect-rounded-corners)
shadow-ignore-shaped = false;


#################################
#
# Opacity
#
#################################
inactive-opacity=1.0;
active-opacity = 1.0;
frame-opacity = 1.0;
inactive-opacity-override = false;

# Specify a list of conditions of windows that should always be considered focused.
focus-exclude = [
  "class_g = 'Cairo-clock'",
  "class_g = 'Rofi'",
  "class_g = 'Krita'"
];


# Let's see how this goes for Krita and Art programs.
# TODO: Maybe set Art programs and image viewes to be
# considered always active.
# TODO: On the other hand we may not want dim at all.
# Dim inactive windows. (0.0 - 1.0)
inactive-dim = 0.0;
# Do not let dimness adjust based on window opacity.
inactive-dim-fixed = true;
# Blur background of transparent windows. Bad performance with X Render backend. GLX backend is preferred.
blur-background = true;
# Blur background of opaque windows with transparent frames as well.
blur-background-frame = true;
# Do not let blur radius adjust based on window opacity.
blur-background-fixed = true;
blur-background-exclude = [
    "window_type = 'dock'",
    "window_type = 'desktop'",
    "window_type = 'menu'",
    "window_type = 'dropdown_menu'",
    "window_type = 'popup_menu'",
    "window_type = 'tooltip'"
];

#################################
#     Background-Blurring       #
#################################

blur: {
  method = "kernel";
  strength = 50;
  background = false;
  background-frame = false;
  background-fixed = false;
  kern = "3x3box";
}

#################################
#
# Fading
#
#################################
fading = true;
fade-in-step = 0.05;
fade-out-step = 0.05;
fade-delta = 5
# Fade windows in/out when opening/closing
#no-fading-openclose = true;
# Specify a list of conditions of windows that should not be faded.
fade-exclude = [ ];


#################################
#
# Other
#
#################################

# Try to detect WM windows and mark them as active.
mark-wmwin-focused = true;
# Mark all non-WM but override-redirect windows active (e.g. menus).
mark-ovredir-focused = true;
# Use EWMH _NET_WM_ACTIVE_WINDOW to determine which window is focused instead of using FocusIn/Out events.
# Usually more reliable but depends on a EWMH-compliant WM.
use-ewmh-active-win = true;

# Detect rounded corners and treat them as rectangular when --shadow-ignore-shaped is on.
detect-rounded-corners = true;
# Detect _NET_WM_OPACITY on client windows, useful for window managers not passing _NET_WM_OPACITY of client windows to frame windows.
# This prevents opacity being ignored for some apps.
# For example without this enabled my xfce4-notifyd is 100% opacity no matter what.
detect-client-opacity = true;

vsync = true;
# Enable DBE painting mode, intended to use with VSync to (hopefully) eliminate tearing.
# Reported to have no effect, though.
dbe = false;

# Limit picom to repaint at most once every 1 / refresh_rate second to boost performance.
# This should not be used with --vsync drm/opengl/opengl-oml as they essentially does --sw-opti's job already,
# unless you wish to specify a lower refresh rate than the actual value.
#sw-opti = true;

# Unredirect all windows if a full-screen opaque window is detected, to maximize performance for full-screen windows, like games.
# Known to cause flickering when redirecting/unredirecting windows.
unredir-if-possible = false;



# Use WM_TRANSIENT_FOR to group windows, and consider windows in the same group focused at the same time.
detect-transient = true;
# Use WM_CLIENT_LEADER to group windows, and consider windows in the same group focused at the same time.
# WM_TRANSIENT_FOR has higher priority if --detect-transient is enabled, too.
detect-client-leader = false;



log-level = "warn";
corner-radius = 7.0;
round-borders = 1;

rounded-corners-exclude = [
  #"window_type = 'normal'",
  "class_g = 'rofi'",
  "class_g = 'trayer'",
  "name = 'xmobar'",
  "class_g = 'awakened-poe-trade'",
  "class_g = 'poe-overlay'",
  "window_type = 'dock'",
  "window_type = 'desktop'"
];
round-borders-exclude = [
  "class_g = 'awakened-poe-trade'",
  "class_g = 'poe-overlay'"
];

wintypes:
{
  tooltip =
    {
        # fade: Fade the particular type of windows.
        fade = true;
        # shadow: Give those windows shadow
        shadow = true;
        # opacity: Default opacity for the type of windows.
        opacity = 1;
        # focus: Whether to always consider windows of this type focused.
        focus = true;

        full-shadow = true;

    };
  dock = { shadow = true; clip-shadow-above = false; shadow-offset-x = 0; shadow-offset-y = 0; shadow-radius: 0 }
  dnd = { shadow = false; }
  popup_menu = {
        opacity = 1.0;  # fade: Fade the particular type of windows.
        fade = true;
        # shadow: Give those windows shadow
        shadow = true;
        
        
        # focus: Whether to always consider windows of this type focused.
        focus = true;
        blur-background = false;
        full-shadow = true;

  };
  dropdown_menu = { opacity = 1.0; }
};
